name: Fetch updated data and deploy

on:
  push:
  schedule:
    - cron: '5,35 * * * *'
    - cron: '20 17 * * *'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repo
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - uses: actions/cache@v2
      name: Configure pip caching
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ensure dbs/ exists
      run: mkdir -p dbs
    - name: Download existing .db files
      if: |-
        !contains(github.event.head_commit.message, 'REFRESH_DBS') && !(github.event_name == 'schedule' && github.event.schedule == '20 17 * * *')
      env:
        DATASETTE_TOKEN: ${{ secrets.DATASETTE_TOKEN }}
      run: |-
        datasette-clone https://biglocal.datasettes.com/ dbs -v --token=$DATASETTE_TOKEN
    - name: Fetch projects
      env:
        BIGLOCAL_TOKEN: ${{ secrets.BIGLOCAL_TOKEN }}
      run: python fetch_projects.py dbs/biglocal.db $BIGLOCAL_TOKEN --contact biglocalnews@stanford.edu
    - name: Populate tables
      run: cd dbs && python ../populate_tables.py
    - name: Redact URLs in files table
      run: |-
        sudo apt-get install sqlite3
        sqlite3 dbs/biglocal.db "update files set uri = null"
    - name: Update metadata.json with project descriptions
      run: |-
        python update_metadata.py dbs/biglocal.db metadata.json production-metadata.json
    - name: List files in dbs
      run: |-
        ls -lah dbs
    - name: Set variables to decide if we should deploy
      id: decide_variables
      env:
        DATASETTE_TOKEN: ${{ secrets.DATASETTE_TOKEN }}
      shell: bash
      run: |-
        shopt -s extglob
        export LATEST_DB_HASH=$(md5sum -b !(dbs/biglocal*).db | md5sum | cut -f 1 -d ' ')
        echo "##[set-output name=latest_db_hash;]$LATEST_DB_HASH"
        echo "##[set-output name=deployed_db_hash;]$(curl -s -H "Authorization: Bearer $DATASETTE_TOKEN" https://biglocal.datasettes.com/-/versions.json | jq '.datasette.note' -r)"
    - name: See output variables
      run: |
        echo "latest_db_hash: $latest_db_hash"
        echo "deployed_db_hash: $deployed_db_hash"
      env:
        latest_db_hash: ${{ steps.decide_variables.outputs.latest_db_hash }}
        deployed_db_hash: ${{ steps.decide_variables.outputs.deployed_db_hash }}
    - name: Set up Cloud Run
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || steps.decide_variables.outputs.latest_db_hash != steps.decide_variables.outputs.deployed_db_hash)
      with:
        version: '275.0.0'
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
    - name: Deploy to Cloud Run
      if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || steps.decide_variables.outputs.latest_db_hash != steps.decide_variables.outputs.deployed_db_hash)
      env:
        DATASETTE_TOKEN: ${{ secrets.DATASETTE_TOKEN }}
        GH_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
        GH_CLIENT_SECRET: ${{ secrets.GH_CLIENT_SECRET }}
        LATEST_DB_HASH: ${{ steps.decide_variables.outputs.latest_db_hash }}
      run: |-
        gcloud config set run/region us-central1
        gcloud config set project datasette-222320
        datasette publish cloudrun dbs/*.db \
           --service=biglocal \
           --branch=15e232180427e988174fdf88440c84b91d2d98d1 \
           --install=datasette-auth-github \
           --install=datasette-render-markdown \
           --install=datasette-vega \
           --plugin-secret token-auth secret $DATASETTE_TOKEN \
           --memory=2Gi \
           --static css:css \
           --plugins-dir=plugins \
           --metadata=production-metadata.json \
           --version-note=$LATEST_DB_HASH
